// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mw.internal.robotics.gazebotransport.TestMsgs.proto

#include "mw.internal.robotics.gazebotransport.TestMsgs.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_mw_2einternal_2erobotics_2egazebotransport_2eTestMsgs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestArrays_mw_2einternal_2erobotics_2egazebotransport_2eTestMsgs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mw_2einternal_2erobotics_2egazebotransport_2eTestMsgs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TestNestedMessage_mw_2einternal_2erobotics_2egazebotransport_2eTestMsgs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mw_2einternal_2erobotics_2egazebotransport_2eTestMsgs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestScalars_mw_2einternal_2erobotics_2egazebotransport_2eTestMsgs_2eproto;
namespace mw {
namespace internal {
namespace robotics {
namespace gazebotransport {
class TestScalarsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestScalars> _instance;
} _TestScalars_default_instance_;
class TestArraysDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestArrays> _instance;
} _TestArrays_default_instance_;
class TestNestedMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestNestedMessage> _instance;
} _TestNestedMessage_default_instance_;
class TestMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestMessage> _instance;
  const ::mw::internal::robotics::gazebotransport::TestScalars* test_scalar_;
  const ::mw::internal::robotics::gazebotransport::TestArrays* test_array_;
  const ::mw::internal::robotics::gazebotransport::TestNestedMessage* test_nested_message_;
} _TestMessage_default_instance_;
class TestPoseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestPose> _instance;
} _TestPose_default_instance_;
}  // namespace gazebotransport
}  // namespace robotics
}  // namespace internal
}  // namespace mw
static void InitDefaultsscc_info_TestArrays_mw_2einternal_2erobotics_2egazebotransport_2eTestMsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mw::internal::robotics::gazebotransport::_TestArrays_default_instance_;
    new (ptr) ::mw::internal::robotics::gazebotransport::TestArrays();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mw::internal::robotics::gazebotransport::TestArrays::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestArrays_mw_2einternal_2erobotics_2egazebotransport_2eTestMsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TestArrays_mw_2einternal_2erobotics_2egazebotransport_2eTestMsgs_2eproto}, {}};

static void InitDefaultsscc_info_TestMessage_mw_2einternal_2erobotics_2egazebotransport_2eTestMsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mw::internal::robotics::gazebotransport::_TestMessage_default_instance_;
    new (ptr) ::mw::internal::robotics::gazebotransport::TestMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mw::internal::robotics::gazebotransport::TestMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_TestMessage_mw_2einternal_2erobotics_2egazebotransport_2eTestMsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_TestMessage_mw_2einternal_2erobotics_2egazebotransport_2eTestMsgs_2eproto}, {
      &scc_info_TestScalars_mw_2einternal_2erobotics_2egazebotransport_2eTestMsgs_2eproto.base,
      &scc_info_TestArrays_mw_2einternal_2erobotics_2egazebotransport_2eTestMsgs_2eproto.base,
      &scc_info_TestNestedMessage_mw_2einternal_2erobotics_2egazebotransport_2eTestMsgs_2eproto.base,}};

static void InitDefaultsscc_info_TestNestedMessage_mw_2einternal_2erobotics_2egazebotransport_2eTestMsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mw::internal::robotics::gazebotransport::_TestNestedMessage_default_instance_;
    new (ptr) ::mw::internal::robotics::gazebotransport::TestNestedMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mw::internal::robotics::gazebotransport::TestNestedMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TestNestedMessage_mw_2einternal_2erobotics_2egazebotransport_2eTestMsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TestNestedMessage_mw_2einternal_2erobotics_2egazebotransport_2eTestMsgs_2eproto}, {
      &scc_info_TestScalars_mw_2einternal_2erobotics_2egazebotransport_2eTestMsgs_2eproto.base,}};

static void InitDefaultsscc_info_TestPose_mw_2einternal_2erobotics_2egazebotransport_2eTestMsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mw::internal::robotics::gazebotransport::_TestPose_default_instance_;
    new (ptr) ::mw::internal::robotics::gazebotransport::TestPose();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mw::internal::robotics::gazebotransport::TestPose::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestPose_mw_2einternal_2erobotics_2egazebotransport_2eTestMsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TestPose_mw_2einternal_2erobotics_2egazebotransport_2eTestMsgs_2eproto}, {}};

static void InitDefaultsscc_info_TestScalars_mw_2einternal_2erobotics_2egazebotransport_2eTestMsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mw::internal::robotics::gazebotransport::_TestScalars_default_instance_;
    new (ptr) ::mw::internal::robotics::gazebotransport::TestScalars();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mw::internal::robotics::gazebotransport::TestScalars::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestScalars_mw_2einternal_2erobotics_2egazebotransport_2eTestMsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TestScalars_mw_2einternal_2erobotics_2egazebotransport_2eTestMsgs_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_mw_2einternal_2erobotics_2egazebotransport_2eTestMsgs_2eproto[5];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_mw_2einternal_2erobotics_2egazebotransport_2eTestMsgs_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_mw_2einternal_2erobotics_2egazebotransport_2eTestMsgs_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_mw_2einternal_2erobotics_2egazebotransport_2eTestMsgs_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::TestScalars, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::TestScalars, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::TestScalars, integer_64_),
  PROTOBUF_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::TestScalars, unsigned_integer_64_),
  PROTOBUF_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::TestScalars, integer_32_),
  PROTOBUF_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::TestScalars, unsigned_integer_32_),
  PROTOBUF_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::TestScalars, binary_64_),
  PROTOBUF_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::TestScalars, binary_32_),
  PROTOBUF_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::TestScalars, byte_array_),
  PROTOBUF_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::TestScalars, character_array_),
  PROTOBUF_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::TestScalars, enum_item_),
  PROTOBUF_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::TestScalars, logical_item_),
  2,
  3,
  4,
  5,
  6,
  7,
  0,
  1,
  8,
  9,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::TestArrays, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::TestArrays, integer_64_),
  PROTOBUF_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::TestArrays, unsigned_integer_64_),
  PROTOBUF_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::TestArrays, integer_32_),
  PROTOBUF_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::TestArrays, unsigned_integer_32_),
  PROTOBUF_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::TestArrays, binary_64_),
  PROTOBUF_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::TestArrays, binary_32_),
  PROTOBUF_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::TestArrays, byte_array_),
  PROTOBUF_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::TestArrays, character_array_),
  PROTOBUF_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::TestArrays, enum_item_),
  PROTOBUF_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::TestArrays, logical_item_),
  PROTOBUF_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::TestNestedMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::TestNestedMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::TestNestedMessage, scalar_nested_message_),
  PROTOBUF_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::TestNestedMessage, array_nested_message_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::TestMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::TestMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::TestMessage, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::TestMessage, header_),
  offsetof(::mw::internal::robotics::gazebotransport::TestMessageDefaultTypeInternal, test_scalar_),
  offsetof(::mw::internal::robotics::gazebotransport::TestMessageDefaultTypeInternal, test_array_),
  offsetof(::mw::internal::robotics::gazebotransport::TestMessageDefaultTypeInternal, test_nested_message_),
  PROTOBUF_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::TestMessage, payload_),
  0,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::TestPose, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::TestPose, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::TestPose, x_),
  PROTOBUF_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::TestPose, y_),
  PROTOBUF_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::TestPose, z_),
  PROTOBUF_FIELD_OFFSET(::mw::internal::robotics::gazebotransport::TestPose, w_),
  0,
  1,
  2,
  3,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 15, sizeof(::mw::internal::robotics::gazebotransport::TestScalars)},
  { 25, -1, sizeof(::mw::internal::robotics::gazebotransport::TestArrays)},
  { 40, 47, sizeof(::mw::internal::robotics::gazebotransport::TestNestedMessage)},
  { 49, 59, sizeof(::mw::internal::robotics::gazebotransport::TestMessage)},
  { 63, 72, sizeof(::mw::internal::robotics::gazebotransport::TestPose)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mw::internal::robotics::gazebotransport::_TestScalars_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mw::internal::robotics::gazebotransport::_TestArrays_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mw::internal::robotics::gazebotransport::_TestNestedMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mw::internal::robotics::gazebotransport::_TestMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mw::internal::robotics::gazebotransport::_TestPose_default_instance_),
};

const char descriptor_table_protodef_mw_2einternal_2erobotics_2egazebotransport_2eTestMsgs_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n3mw.internal.robotics.gazebotransport.T"
  "estMsgs.proto\022$mw.internal.robotics.gaze"
  "botransport\"\233\002\n\013TestScalars\022\022\n\ninteger_6"
  "4\030\001 \002(\003\022\033\n\023unsigned_integer_64\030\002 \002(\004\022\022\n\n"
  "integer_32\030\003 \002(\005\022\033\n\023unsigned_integer_32\030"
  "\004 \002(\r\022\021\n\tbinary_64\030\005 \002(\001\022\021\n\tbinary_32\030\006 "
  "\002(\002\022\022\n\nbyte_array\030\007 \002(\014\022\027\n\017character_arr"
  "ay\030\010 \002(\t\022A\n\tenum_item\030\t \002(\0162..mw.interna"
  "l.robotics.gazebotransport.TestEnum\022\024\n\014l"
  "ogical_item\030\n \002(\010\"\232\002\n\nTestArrays\022\022\n\ninte"
  "ger_64\030\001 \003(\003\022\033\n\023unsigned_integer_64\030\002 \003("
  "\004\022\022\n\ninteger_32\030\003 \003(\005\022\033\n\023unsigned_intege"
  "r_32\030\004 \003(\r\022\021\n\tbinary_64\030\005 \003(\001\022\021\n\tbinary_"
  "32\030\006 \003(\002\022\022\n\nbyte_array\030\007 \003(\014\022\027\n\017characte"
  "r_array\030\010 \003(\t\022A\n\tenum_item\030\t \003(\0162..mw.in"
  "ternal.robotics.gazebotransport.TestEnum"
  "\022\024\n\014logical_item\030\n \003(\010\"\266\001\n\021TestNestedMes"
  "sage\022P\n\025scalar_nested_message\030\001 \002(\01321.mw"
  ".internal.robotics.gazebotransport.TestS"
  "calars\022O\n\024array_nested_message\030\002 \003(\01321.m"
  "w.internal.robotics.gazebotransport.Test"
  "Scalars\"\222\002\n\013TestMessage\022\016\n\006header\030\001 \002(\001\022"
  "H\n\013test_scalar\030\002 \001(\01321.mw.internal.robot"
  "ics.gazebotransport.TestScalarsH\000\022F\n\ntes"
  "t_array\030\003 \001(\01320.mw.internal.robotics.gaz"
  "ebotransport.TestArraysH\000\022V\n\023test_nested"
  "_message\030\004 \001(\01327.mw.internal.robotics.ga"
  "zebotransport.TestNestedMessageH\000B\t\n\007pay"
  "load\"6\n\010TestPose\022\t\n\001x\030\001 \002(\001\022\t\n\001y\030\002 \002(\001\022\t"
  "\n\001z\030\003 \002(\001\022\t\n\001w\030\004 \002(\001*\"\n\010TestEnum\022\n\n\006ITEM"
  "_A\020\000\022\n\n\006ITEM_B\020\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_mw_2einternal_2erobotics_2egazebotransport_2eTestMsgs_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_mw_2einternal_2erobotics_2egazebotransport_2eTestMsgs_2eproto_sccs[5] = {
  &scc_info_TestArrays_mw_2einternal_2erobotics_2egazebotransport_2eTestMsgs_2eproto.base,
  &scc_info_TestMessage_mw_2einternal_2erobotics_2egazebotransport_2eTestMsgs_2eproto.base,
  &scc_info_TestNestedMessage_mw_2einternal_2erobotics_2egazebotransport_2eTestMsgs_2eproto.base,
  &scc_info_TestPose_mw_2einternal_2erobotics_2egazebotransport_2eTestMsgs_2eproto.base,
  &scc_info_TestScalars_mw_2einternal_2erobotics_2egazebotransport_2eTestMsgs_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_mw_2einternal_2erobotics_2egazebotransport_2eTestMsgs_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mw_2einternal_2erobotics_2egazebotransport_2eTestMsgs_2eproto = {
  false, false, descriptor_table_protodef_mw_2einternal_2erobotics_2egazebotransport_2eTestMsgs_2eproto, "mw.internal.robotics.gazebotransport.TestMsgs.proto", 1216,
  &descriptor_table_mw_2einternal_2erobotics_2egazebotransport_2eTestMsgs_2eproto_once, descriptor_table_mw_2einternal_2erobotics_2egazebotransport_2eTestMsgs_2eproto_sccs, descriptor_table_mw_2einternal_2erobotics_2egazebotransport_2eTestMsgs_2eproto_deps, 5, 0,
  schemas, file_default_instances, TableStruct_mw_2einternal_2erobotics_2egazebotransport_2eTestMsgs_2eproto::offsets,
  file_level_metadata_mw_2einternal_2erobotics_2egazebotransport_2eTestMsgs_2eproto, 5, file_level_enum_descriptors_mw_2einternal_2erobotics_2egazebotransport_2eTestMsgs_2eproto, file_level_service_descriptors_mw_2einternal_2erobotics_2egazebotransport_2eTestMsgs_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_mw_2einternal_2erobotics_2egazebotransport_2eTestMsgs_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_mw_2einternal_2erobotics_2egazebotransport_2eTestMsgs_2eproto)), true);
namespace mw {
namespace internal {
namespace robotics {
namespace gazebotransport {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TestEnum_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_mw_2einternal_2erobotics_2egazebotransport_2eTestMsgs_2eproto);
  return file_level_enum_descriptors_mw_2einternal_2erobotics_2egazebotransport_2eTestMsgs_2eproto[0];
}
bool TestEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void TestScalars::InitAsDefaultInstance() {
}
class TestScalars::_Internal {
 public:
  using HasBits = decltype(std::declval<TestScalars>()._has_bits_);
  static void set_has_integer_64(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_unsigned_integer_64(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_integer_32(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_unsigned_integer_32(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_binary_64(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_binary_32(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_byte_array(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_character_array(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_enum_item(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_logical_item(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x000003ff) ^ 0x000003ff) != 0;
  }
};

TestScalars::TestScalars(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mw.internal.robotics.gazebotransport.TestScalars)
}
TestScalars::TestScalars(const TestScalars& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  byte_array_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_byte_array()) {
    byte_array_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_byte_array(),
      GetArena());
  }
  character_array_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_character_array()) {
    character_array_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_character_array(),
      GetArena());
  }
  ::memcpy(&integer_64_, &from.integer_64_,
    static_cast<size_t>(reinterpret_cast<char*>(&logical_item_) -
    reinterpret_cast<char*>(&integer_64_)) + sizeof(logical_item_));
  // @@protoc_insertion_point(copy_constructor:mw.internal.robotics.gazebotransport.TestScalars)
}

void TestScalars::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TestScalars_mw_2einternal_2erobotics_2egazebotransport_2eTestMsgs_2eproto.base);
  byte_array_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  character_array_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&integer_64_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&logical_item_) -
      reinterpret_cast<char*>(&integer_64_)) + sizeof(logical_item_));
}

TestScalars::~TestScalars() {
  // @@protoc_insertion_point(destructor:mw.internal.robotics.gazebotransport.TestScalars)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TestScalars::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  byte_array_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  character_array_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TestScalars::ArenaDtor(void* object) {
  TestScalars* _this = reinterpret_cast< TestScalars* >(object);
  (void)_this;
}
void TestScalars::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestScalars::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestScalars& TestScalars::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestScalars_mw_2einternal_2erobotics_2egazebotransport_2eTestMsgs_2eproto.base);
  return *internal_default_instance();
}


void TestScalars::Clear() {
// @@protoc_insertion_point(message_clear_start:mw.internal.robotics.gazebotransport.TestScalars)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      byte_array_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      character_array_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&integer_64_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&binary_32_) -
        reinterpret_cast<char*>(&integer_64_)) + sizeof(binary_32_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&enum_item_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&logical_item_) -
        reinterpret_cast<char*>(&enum_item_)) + sizeof(logical_item_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestScalars::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int64 integer_64 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_integer_64(&has_bits);
          integer_64_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 unsigned_integer_64 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_unsigned_integer_64(&has_bits);
          unsigned_integer_64_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 integer_32 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_integer_32(&has_bits);
          integer_32_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 unsigned_integer_32 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_unsigned_integer_32(&has_bits);
          unsigned_integer_32_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required double binary_64 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_binary_64(&has_bits);
          binary_64_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required float binary_32 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_binary_32(&has_bits);
          binary_32_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required bytes byte_array = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_byte_array();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string character_array = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_character_array();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mw.internal.robotics.gazebotransport.TestScalars.character_array");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .mw.internal.robotics.gazebotransport.TestEnum enum_item = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::mw::internal::robotics::gazebotransport::TestEnum_IsValid(val))) {
            _internal_set_enum_item(static_cast<::mw::internal::robotics::gazebotransport::TestEnum>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(9, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required bool logical_item = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_logical_item(&has_bits);
          logical_item_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestScalars::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mw.internal.robotics.gazebotransport.TestScalars)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 integer_64 = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_integer_64(), target);
  }

  // required uint64 unsigned_integer_64 = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_unsigned_integer_64(), target);
  }

  // required int32 integer_32 = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_integer_32(), target);
  }

  // required uint32 unsigned_integer_32 = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_unsigned_integer_32(), target);
  }

  // required double binary_64 = 5;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_binary_64(), target);
  }

  // required float binary_32 = 6;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_binary_32(), target);
  }

  // required bytes byte_array = 7;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_byte_array(), target);
  }

  // required string character_array = 8;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_character_array().data(), static_cast<int>(this->_internal_character_array().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mw.internal.robotics.gazebotransport.TestScalars.character_array");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_character_array(), target);
  }

  // required .mw.internal.robotics.gazebotransport.TestEnum enum_item = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      9, this->_internal_enum_item(), target);
  }

  // required bool logical_item = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_logical_item(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mw.internal.robotics.gazebotransport.TestScalars)
  return target;
}

size_t TestScalars::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:mw.internal.robotics.gazebotransport.TestScalars)
  size_t total_size = 0;

  if (_internal_has_byte_array()) {
    // required bytes byte_array = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_byte_array());
  }

  if (_internal_has_character_array()) {
    // required string character_array = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_character_array());
  }

  if (_internal_has_integer_64()) {
    // required int64 integer_64 = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_integer_64());
  }

  if (_internal_has_unsigned_integer_64()) {
    // required uint64 unsigned_integer_64 = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_unsigned_integer_64());
  }

  if (_internal_has_integer_32()) {
    // required int32 integer_32 = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_integer_32());
  }

  if (_internal_has_unsigned_integer_32()) {
    // required uint32 unsigned_integer_32 = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_unsigned_integer_32());
  }

  if (_internal_has_binary_64()) {
    // required double binary_64 = 5;
    total_size += 1 + 8;
  }

  if (_internal_has_binary_32()) {
    // required float binary_32 = 6;
    total_size += 1 + 4;
  }

  if (_internal_has_enum_item()) {
    // required .mw.internal.robotics.gazebotransport.TestEnum enum_item = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_enum_item());
  }

  if (_internal_has_logical_item()) {
    // required bool logical_item = 10;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t TestScalars::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mw.internal.robotics.gazebotransport.TestScalars)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x000003ff) ^ 0x000003ff) == 0) {  // All required fields are present.
    // required bytes byte_array = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_byte_array());

    // required string character_array = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_character_array());

    // required int64 integer_64 = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_integer_64());

    // required uint64 unsigned_integer_64 = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_unsigned_integer_64());

    // required int32 integer_32 = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_integer_32());

    // required uint32 unsigned_integer_32 = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_unsigned_integer_32());

    // required double binary_64 = 5;
    total_size += 1 + 8;

    // required float binary_32 = 6;
    total_size += 1 + 4;

    // required .mw.internal.robotics.gazebotransport.TestEnum enum_item = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_enum_item());

    // required bool logical_item = 10;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestScalars::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mw.internal.robotics.gazebotransport.TestScalars)
  GOOGLE_DCHECK_NE(&from, this);
  const TestScalars* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestScalars>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mw.internal.robotics.gazebotransport.TestScalars)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mw.internal.robotics.gazebotransport.TestScalars)
    MergeFrom(*source);
  }
}

void TestScalars::MergeFrom(const TestScalars& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mw.internal.robotics.gazebotransport.TestScalars)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_byte_array(from._internal_byte_array());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_character_array(from._internal_character_array());
    }
    if (cached_has_bits & 0x00000004u) {
      integer_64_ = from.integer_64_;
    }
    if (cached_has_bits & 0x00000008u) {
      unsigned_integer_64_ = from.unsigned_integer_64_;
    }
    if (cached_has_bits & 0x00000010u) {
      integer_32_ = from.integer_32_;
    }
    if (cached_has_bits & 0x00000020u) {
      unsigned_integer_32_ = from.unsigned_integer_32_;
    }
    if (cached_has_bits & 0x00000040u) {
      binary_64_ = from.binary_64_;
    }
    if (cached_has_bits & 0x00000080u) {
      binary_32_ = from.binary_32_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      enum_item_ = from.enum_item_;
    }
    if (cached_has_bits & 0x00000200u) {
      logical_item_ = from.logical_item_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TestScalars::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mw.internal.robotics.gazebotransport.TestScalars)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestScalars::CopyFrom(const TestScalars& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mw.internal.robotics.gazebotransport.TestScalars)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestScalars::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void TestScalars::InternalSwap(TestScalars* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  byte_array_.Swap(&other->byte_array_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  character_array_.Swap(&other->character_array_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TestScalars, logical_item_)
      + sizeof(TestScalars::logical_item_)
      - PROTOBUF_FIELD_OFFSET(TestScalars, integer_64_)>(
          reinterpret_cast<char*>(&integer_64_),
          reinterpret_cast<char*>(&other->integer_64_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TestScalars::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TestArrays::InitAsDefaultInstance() {
}
class TestArrays::_Internal {
 public:
};

TestArrays::TestArrays(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  integer_64_(arena),
  unsigned_integer_64_(arena),
  integer_32_(arena),
  unsigned_integer_32_(arena),
  binary_64_(arena),
  binary_32_(arena),
  byte_array_(arena),
  character_array_(arena),
  enum_item_(arena),
  logical_item_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mw.internal.robotics.gazebotransport.TestArrays)
}
TestArrays::TestArrays(const TestArrays& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      integer_64_(from.integer_64_),
      unsigned_integer_64_(from.unsigned_integer_64_),
      integer_32_(from.integer_32_),
      unsigned_integer_32_(from.unsigned_integer_32_),
      binary_64_(from.binary_64_),
      binary_32_(from.binary_32_),
      byte_array_(from.byte_array_),
      character_array_(from.character_array_),
      enum_item_(from.enum_item_),
      logical_item_(from.logical_item_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mw.internal.robotics.gazebotransport.TestArrays)
}

void TestArrays::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TestArrays_mw_2einternal_2erobotics_2egazebotransport_2eTestMsgs_2eproto.base);
}

TestArrays::~TestArrays() {
  // @@protoc_insertion_point(destructor:mw.internal.robotics.gazebotransport.TestArrays)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TestArrays::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TestArrays::ArenaDtor(void* object) {
  TestArrays* _this = reinterpret_cast< TestArrays* >(object);
  (void)_this;
}
void TestArrays::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestArrays::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestArrays& TestArrays::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestArrays_mw_2einternal_2erobotics_2egazebotransport_2eTestMsgs_2eproto.base);
  return *internal_default_instance();
}


void TestArrays::Clear() {
// @@protoc_insertion_point(message_clear_start:mw.internal.robotics.gazebotransport.TestArrays)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  integer_64_.Clear();
  unsigned_integer_64_.Clear();
  integer_32_.Clear();
  unsigned_integer_32_.Clear();
  binary_64_.Clear();
  binary_32_.Clear();
  byte_array_.Clear();
  character_array_.Clear();
  enum_item_.Clear();
  logical_item_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestArrays::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int64 integer_64 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_integer_64(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_integer_64(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint64 unsigned_integer_64 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_unsigned_integer_64(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_unsigned_integer_64(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 integer_32 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_integer_32(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_integer_32(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 unsigned_integer_32 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_unsigned_integer_32(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<32>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_unsigned_integer_32(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double binary_64 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_binary_64(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<41>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_binary_64(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float binary_32 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_binary_32(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<53>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_binary_32(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bytes byte_array = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_byte_array();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string character_array = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_character_array();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mw.internal.robotics.gazebotransport.TestArrays.character_array");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .mw.internal.robotics.gazebotransport.TestEnum enum_item = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ptr -= 1;
          do {
            ptr += 1;
            ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::mw::internal::robotics::gazebotransport::TestEnum_IsValid(val))) {
              _internal_add_enum_item(static_cast<::mw::internal::robotics::gazebotransport::TestEnum>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(9, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<72>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(_internal_mutable_enum_item(), ptr, ctx, ::mw::internal::robotics::gazebotransport::TestEnum_IsValid, &_internal_metadata_, 9);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bool logical_item = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_logical_item(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<80>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_logical_item(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestArrays::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mw.internal.robotics.gazebotransport.TestArrays)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int64 integer_64 = 1;
  for (int i = 0, n = this->_internal_integer_64_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_integer_64(i), target);
  }

  // repeated uint64 unsigned_integer_64 = 2;
  for (int i = 0, n = this->_internal_unsigned_integer_64_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_unsigned_integer_64(i), target);
  }

  // repeated int32 integer_32 = 3;
  for (int i = 0, n = this->_internal_integer_32_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_integer_32(i), target);
  }

  // repeated uint32 unsigned_integer_32 = 4;
  for (int i = 0, n = this->_internal_unsigned_integer_32_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_unsigned_integer_32(i), target);
  }

  // repeated double binary_64 = 5;
  for (int i = 0, n = this->_internal_binary_64_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_binary_64(i), target);
  }

  // repeated float binary_32 = 6;
  for (int i = 0, n = this->_internal_binary_32_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_binary_32(i), target);
  }

  // repeated bytes byte_array = 7;
  for (int i = 0, n = this->_internal_byte_array_size(); i < n; i++) {
    const auto& s = this->_internal_byte_array(i);
    target = stream->WriteBytes(7, s, target);
  }

  // repeated string character_array = 8;
  for (int i = 0, n = this->_internal_character_array_size(); i < n; i++) {
    const auto& s = this->_internal_character_array(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mw.internal.robotics.gazebotransport.TestArrays.character_array");
    target = stream->WriteString(8, s, target);
  }

  // repeated .mw.internal.robotics.gazebotransport.TestEnum enum_item = 9;
  for (int i = 0, n = this->_internal_enum_item_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
        9, this->_internal_enum_item(i), target);
  }

  // repeated bool logical_item = 10;
  for (int i = 0, n = this->_internal_logical_item_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_logical_item(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mw.internal.robotics.gazebotransport.TestArrays)
  return target;
}

size_t TestArrays::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mw.internal.robotics.gazebotransport.TestArrays)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 integer_64 = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->integer_64_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_integer_64_size());
    total_size += data_size;
  }

  // repeated uint64 unsigned_integer_64 = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->unsigned_integer_64_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_unsigned_integer_64_size());
    total_size += data_size;
  }

  // repeated int32 integer_32 = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->integer_32_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_integer_32_size());
    total_size += data_size;
  }

  // repeated uint32 unsigned_integer_32 = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->unsigned_integer_32_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_unsigned_integer_32_size());
    total_size += data_size;
  }

  // repeated double binary_64 = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_binary_64_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_binary_64_size());
    total_size += data_size;
  }

  // repeated float binary_32 = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_binary_32_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_binary_32_size());
    total_size += data_size;
  }

  // repeated bytes byte_array = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(byte_array_.size());
  for (int i = 0, n = byte_array_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      byte_array_.Get(i));
  }

  // repeated string character_array = 8;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(character_array_.size());
  for (int i = 0, n = character_array_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      character_array_.Get(i));
  }

  // repeated .mw.internal.robotics.gazebotransport.TestEnum enum_item = 9;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_enum_item_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_enum_item(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  // repeated bool logical_item = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_logical_item_size());
    size_t data_size = 1UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_logical_item_size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestArrays::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mw.internal.robotics.gazebotransport.TestArrays)
  GOOGLE_DCHECK_NE(&from, this);
  const TestArrays* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestArrays>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mw.internal.robotics.gazebotransport.TestArrays)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mw.internal.robotics.gazebotransport.TestArrays)
    MergeFrom(*source);
  }
}

void TestArrays::MergeFrom(const TestArrays& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mw.internal.robotics.gazebotransport.TestArrays)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  integer_64_.MergeFrom(from.integer_64_);
  unsigned_integer_64_.MergeFrom(from.unsigned_integer_64_);
  integer_32_.MergeFrom(from.integer_32_);
  unsigned_integer_32_.MergeFrom(from.unsigned_integer_32_);
  binary_64_.MergeFrom(from.binary_64_);
  binary_32_.MergeFrom(from.binary_32_);
  byte_array_.MergeFrom(from.byte_array_);
  character_array_.MergeFrom(from.character_array_);
  enum_item_.MergeFrom(from.enum_item_);
  logical_item_.MergeFrom(from.logical_item_);
}

void TestArrays::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mw.internal.robotics.gazebotransport.TestArrays)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestArrays::CopyFrom(const TestArrays& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mw.internal.robotics.gazebotransport.TestArrays)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestArrays::IsInitialized() const {
  return true;
}

void TestArrays::InternalSwap(TestArrays* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  integer_64_.InternalSwap(&other->integer_64_);
  unsigned_integer_64_.InternalSwap(&other->unsigned_integer_64_);
  integer_32_.InternalSwap(&other->integer_32_);
  unsigned_integer_32_.InternalSwap(&other->unsigned_integer_32_);
  binary_64_.InternalSwap(&other->binary_64_);
  binary_32_.InternalSwap(&other->binary_32_);
  byte_array_.InternalSwap(&other->byte_array_);
  character_array_.InternalSwap(&other->character_array_);
  enum_item_.InternalSwap(&other->enum_item_);
  logical_item_.InternalSwap(&other->logical_item_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestArrays::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TestNestedMessage::InitAsDefaultInstance() {
  ::mw::internal::robotics::gazebotransport::_TestNestedMessage_default_instance_._instance.get_mutable()->scalar_nested_message_ = const_cast< ::mw::internal::robotics::gazebotransport::TestScalars*>(
      ::mw::internal::robotics::gazebotransport::TestScalars::internal_default_instance());
}
class TestNestedMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<TestNestedMessage>()._has_bits_);
  static const ::mw::internal::robotics::gazebotransport::TestScalars& scalar_nested_message(const TestNestedMessage* msg);
  static void set_has_scalar_nested_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::mw::internal::robotics::gazebotransport::TestScalars&
TestNestedMessage::_Internal::scalar_nested_message(const TestNestedMessage* msg) {
  return *msg->scalar_nested_message_;
}
TestNestedMessage::TestNestedMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  array_nested_message_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mw.internal.robotics.gazebotransport.TestNestedMessage)
}
TestNestedMessage::TestNestedMessage(const TestNestedMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      array_nested_message_(from.array_nested_message_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_scalar_nested_message()) {
    scalar_nested_message_ = new ::mw::internal::robotics::gazebotransport::TestScalars(*from.scalar_nested_message_);
  } else {
    scalar_nested_message_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mw.internal.robotics.gazebotransport.TestNestedMessage)
}

void TestNestedMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TestNestedMessage_mw_2einternal_2erobotics_2egazebotransport_2eTestMsgs_2eproto.base);
  scalar_nested_message_ = nullptr;
}

TestNestedMessage::~TestNestedMessage() {
  // @@protoc_insertion_point(destructor:mw.internal.robotics.gazebotransport.TestNestedMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TestNestedMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete scalar_nested_message_;
}

void TestNestedMessage::ArenaDtor(void* object) {
  TestNestedMessage* _this = reinterpret_cast< TestNestedMessage* >(object);
  (void)_this;
}
void TestNestedMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestNestedMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestNestedMessage& TestNestedMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestNestedMessage_mw_2einternal_2erobotics_2egazebotransport_2eTestMsgs_2eproto.base);
  return *internal_default_instance();
}


void TestNestedMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:mw.internal.robotics.gazebotransport.TestNestedMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  array_nested_message_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(scalar_nested_message_ != nullptr);
    scalar_nested_message_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestNestedMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .mw.internal.robotics.gazebotransport.TestScalars scalar_nested_message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_scalar_nested_message(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .mw.internal.robotics.gazebotransport.TestScalars array_nested_message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_array_nested_message(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestNestedMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mw.internal.robotics.gazebotransport.TestNestedMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .mw.internal.robotics.gazebotransport.TestScalars scalar_nested_message = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::scalar_nested_message(this), target, stream);
  }

  // repeated .mw.internal.robotics.gazebotransport.TestScalars array_nested_message = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_array_nested_message_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_array_nested_message(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mw.internal.robotics.gazebotransport.TestNestedMessage)
  return target;
}

size_t TestNestedMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mw.internal.robotics.gazebotransport.TestNestedMessage)
  size_t total_size = 0;

  // required .mw.internal.robotics.gazebotransport.TestScalars scalar_nested_message = 1;
  if (_internal_has_scalar_nested_message()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *scalar_nested_message_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mw.internal.robotics.gazebotransport.TestScalars array_nested_message = 2;
  total_size += 1UL * this->_internal_array_nested_message_size();
  for (const auto& msg : this->array_nested_message_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestNestedMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mw.internal.robotics.gazebotransport.TestNestedMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const TestNestedMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestNestedMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mw.internal.robotics.gazebotransport.TestNestedMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mw.internal.robotics.gazebotransport.TestNestedMessage)
    MergeFrom(*source);
  }
}

void TestNestedMessage::MergeFrom(const TestNestedMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mw.internal.robotics.gazebotransport.TestNestedMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  array_nested_message_.MergeFrom(from.array_nested_message_);
  if (from._internal_has_scalar_nested_message()) {
    _internal_mutable_scalar_nested_message()->::mw::internal::robotics::gazebotransport::TestScalars::MergeFrom(from._internal_scalar_nested_message());
  }
}

void TestNestedMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mw.internal.robotics.gazebotransport.TestNestedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestNestedMessage::CopyFrom(const TestNestedMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mw.internal.robotics.gazebotransport.TestNestedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestNestedMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(array_nested_message_)) return false;
  if (_internal_has_scalar_nested_message()) {
    if (!scalar_nested_message_->IsInitialized()) return false;
  }
  return true;
}

void TestNestedMessage::InternalSwap(TestNestedMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  array_nested_message_.InternalSwap(&other->array_nested_message_);
  swap(scalar_nested_message_, other->scalar_nested_message_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestNestedMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TestMessage::InitAsDefaultInstance() {
  ::mw::internal::robotics::gazebotransport::_TestMessage_default_instance_.test_scalar_ = const_cast< ::mw::internal::robotics::gazebotransport::TestScalars*>(
      ::mw::internal::robotics::gazebotransport::TestScalars::internal_default_instance());
  ::mw::internal::robotics::gazebotransport::_TestMessage_default_instance_.test_array_ = const_cast< ::mw::internal::robotics::gazebotransport::TestArrays*>(
      ::mw::internal::robotics::gazebotransport::TestArrays::internal_default_instance());
  ::mw::internal::robotics::gazebotransport::_TestMessage_default_instance_.test_nested_message_ = const_cast< ::mw::internal::robotics::gazebotransport::TestNestedMessage*>(
      ::mw::internal::robotics::gazebotransport::TestNestedMessage::internal_default_instance());
}
class TestMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<TestMessage>()._has_bits_);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::mw::internal::robotics::gazebotransport::TestScalars& test_scalar(const TestMessage* msg);
  static const ::mw::internal::robotics::gazebotransport::TestArrays& test_array(const TestMessage* msg);
  static const ::mw::internal::robotics::gazebotransport::TestNestedMessage& test_nested_message(const TestMessage* msg);
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::mw::internal::robotics::gazebotransport::TestScalars&
TestMessage::_Internal::test_scalar(const TestMessage* msg) {
  return *msg->payload_.test_scalar_;
}
const ::mw::internal::robotics::gazebotransport::TestArrays&
TestMessage::_Internal::test_array(const TestMessage* msg) {
  return *msg->payload_.test_array_;
}
const ::mw::internal::robotics::gazebotransport::TestNestedMessage&
TestMessage::_Internal::test_nested_message(const TestMessage* msg) {
  return *msg->payload_.test_nested_message_;
}
void TestMessage::set_allocated_test_scalar(::mw::internal::robotics::gazebotransport::TestScalars* test_scalar) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_payload();
  if (test_scalar) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(test_scalar);
    if (message_arena != submessage_arena) {
      test_scalar = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, test_scalar, submessage_arena);
    }
    set_has_test_scalar();
    payload_.test_scalar_ = test_scalar;
  }
  // @@protoc_insertion_point(field_set_allocated:mw.internal.robotics.gazebotransport.TestMessage.test_scalar)
}
void TestMessage::set_allocated_test_array(::mw::internal::robotics::gazebotransport::TestArrays* test_array) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_payload();
  if (test_array) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(test_array);
    if (message_arena != submessage_arena) {
      test_array = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, test_array, submessage_arena);
    }
    set_has_test_array();
    payload_.test_array_ = test_array;
  }
  // @@protoc_insertion_point(field_set_allocated:mw.internal.robotics.gazebotransport.TestMessage.test_array)
}
void TestMessage::set_allocated_test_nested_message(::mw::internal::robotics::gazebotransport::TestNestedMessage* test_nested_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_payload();
  if (test_nested_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(test_nested_message);
    if (message_arena != submessage_arena) {
      test_nested_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, test_nested_message, submessage_arena);
    }
    set_has_test_nested_message();
    payload_.test_nested_message_ = test_nested_message;
  }
  // @@protoc_insertion_point(field_set_allocated:mw.internal.robotics.gazebotransport.TestMessage.test_nested_message)
}
TestMessage::TestMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mw.internal.robotics.gazebotransport.TestMessage)
}
TestMessage::TestMessage(const TestMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  header_ = from.header_;
  clear_has_payload();
  switch (from.payload_case()) {
    case kTestScalar: {
      _internal_mutable_test_scalar()->::mw::internal::robotics::gazebotransport::TestScalars::MergeFrom(from._internal_test_scalar());
      break;
    }
    case kTestArray: {
      _internal_mutable_test_array()->::mw::internal::robotics::gazebotransport::TestArrays::MergeFrom(from._internal_test_array());
      break;
    }
    case kTestNestedMessage: {
      _internal_mutable_test_nested_message()->::mw::internal::robotics::gazebotransport::TestNestedMessage::MergeFrom(from._internal_test_nested_message());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:mw.internal.robotics.gazebotransport.TestMessage)
}

void TestMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TestMessage_mw_2einternal_2erobotics_2egazebotransport_2eTestMsgs_2eproto.base);
  header_ = 0;
  clear_has_payload();
}

TestMessage::~TestMessage() {
  // @@protoc_insertion_point(destructor:mw.internal.robotics.gazebotransport.TestMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TestMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_payload()) {
    clear_payload();
  }
}

void TestMessage::ArenaDtor(void* object) {
  TestMessage* _this = reinterpret_cast< TestMessage* >(object);
  (void)_this;
}
void TestMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestMessage& TestMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestMessage_mw_2einternal_2erobotics_2egazebotransport_2eTestMsgs_2eproto.base);
  return *internal_default_instance();
}


void TestMessage::clear_payload() {
// @@protoc_insertion_point(one_of_clear_start:mw.internal.robotics.gazebotransport.TestMessage)
  switch (payload_case()) {
    case kTestScalar: {
      if (GetArena() == nullptr) {
        delete payload_.test_scalar_;
      }
      break;
    }
    case kTestArray: {
      if (GetArena() == nullptr) {
        delete payload_.test_array_;
      }
      break;
    }
    case kTestNestedMessage: {
      if (GetArena() == nullptr) {
        delete payload_.test_nested_message_;
      }
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PAYLOAD_NOT_SET;
}


void TestMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:mw.internal.robotics.gazebotransport.TestMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  header_ = 0;
  clear_payload();
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required double header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_header(&has_bits);
          header_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .mw.internal.robotics.gazebotransport.TestScalars test_scalar = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_test_scalar(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .mw.internal.robotics.gazebotransport.TestArrays test_array = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_test_array(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .mw.internal.robotics.gazebotransport.TestNestedMessage test_nested_message = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_test_nested_message(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mw.internal.robotics.gazebotransport.TestMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required double header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_header(), target);
  }

  switch (payload_case()) {
    case kTestScalar: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          2, _Internal::test_scalar(this), target, stream);
      break;
    }
    case kTestArray: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          3, _Internal::test_array(this), target, stream);
      break;
    }
    case kTestNestedMessage: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          4, _Internal::test_nested_message(this), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mw.internal.robotics.gazebotransport.TestMessage)
  return target;
}

size_t TestMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mw.internal.robotics.gazebotransport.TestMessage)
  size_t total_size = 0;

  // required double header = 1;
  if (_internal_has_header()) {
    total_size += 1 + 8;
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (payload_case()) {
    // .mw.internal.robotics.gazebotransport.TestScalars test_scalar = 2;
    case kTestScalar: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.test_scalar_);
      break;
    }
    // .mw.internal.robotics.gazebotransport.TestArrays test_array = 3;
    case kTestArray: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.test_array_);
      break;
    }
    // .mw.internal.robotics.gazebotransport.TestNestedMessage test_nested_message = 4;
    case kTestNestedMessage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.test_nested_message_);
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mw.internal.robotics.gazebotransport.TestMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const TestMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mw.internal.robotics.gazebotransport.TestMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mw.internal.robotics.gazebotransport.TestMessage)
    MergeFrom(*source);
  }
}

void TestMessage::MergeFrom(const TestMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mw.internal.robotics.gazebotransport.TestMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_header()) {
    _internal_set_header(from._internal_header());
  }
  switch (from.payload_case()) {
    case kTestScalar: {
      _internal_mutable_test_scalar()->::mw::internal::robotics::gazebotransport::TestScalars::MergeFrom(from._internal_test_scalar());
      break;
    }
    case kTestArray: {
      _internal_mutable_test_array()->::mw::internal::robotics::gazebotransport::TestArrays::MergeFrom(from._internal_test_array());
      break;
    }
    case kTestNestedMessage: {
      _internal_mutable_test_nested_message()->::mw::internal::robotics::gazebotransport::TestNestedMessage::MergeFrom(from._internal_test_nested_message());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
}

void TestMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mw.internal.robotics.gazebotransport.TestMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestMessage::CopyFrom(const TestMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mw.internal.robotics.gazebotransport.TestMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  switch (payload_case()) {
    case kTestScalar: {
      if (has_test_scalar()) {
        if (!this->test_scalar().IsInitialized()) return false;
      }
      break;
    }
    case kTestArray: {
      break;
    }
    case kTestNestedMessage: {
      if (has_test_nested_message()) {
        if (!this->test_nested_message().IsInitialized()) return false;
      }
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  return true;
}

void TestMessage::InternalSwap(TestMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(header_, other->header_);
  swap(payload_, other->payload_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TestPose::InitAsDefaultInstance() {
}
class TestPose::_Internal {
 public:
  using HasBits = decltype(std::declval<TestPose>()._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_z(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_w(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

TestPose::TestPose(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mw.internal.robotics.gazebotransport.TestPose)
}
TestPose::TestPose(const TestPose& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&w_) -
    reinterpret_cast<char*>(&x_)) + sizeof(w_));
  // @@protoc_insertion_point(copy_constructor:mw.internal.robotics.gazebotransport.TestPose)
}

void TestPose::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&w_) -
      reinterpret_cast<char*>(&x_)) + sizeof(w_));
}

TestPose::~TestPose() {
  // @@protoc_insertion_point(destructor:mw.internal.robotics.gazebotransport.TestPose)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TestPose::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TestPose::ArenaDtor(void* object) {
  TestPose* _this = reinterpret_cast< TestPose* >(object);
  (void)_this;
}
void TestPose::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestPose::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestPose& TestPose::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestPose_mw_2einternal_2erobotics_2egazebotransport_2eTestMsgs_2eproto.base);
  return *internal_default_instance();
}


void TestPose::Clear() {
// @@protoc_insertion_point(message_clear_start:mw.internal.robotics.gazebotransport.TestPose)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&w_) -
        reinterpret_cast<char*>(&x_)) + sizeof(w_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestPose::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required double x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_z(&has_bits);
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double w = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_w(&has_bits);
          w_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestPose::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mw.internal.robotics.gazebotransport.TestPose)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required double x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_x(), target);
  }

  // required double y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_y(), target);
  }

  // required double z = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_z(), target);
  }

  // required double w = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_w(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mw.internal.robotics.gazebotransport.TestPose)
  return target;
}

size_t TestPose::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:mw.internal.robotics.gazebotransport.TestPose)
  size_t total_size = 0;

  if (_internal_has_x()) {
    // required double x = 1;
    total_size += 1 + 8;
  }

  if (_internal_has_y()) {
    // required double y = 2;
    total_size += 1 + 8;
  }

  if (_internal_has_z()) {
    // required double z = 3;
    total_size += 1 + 8;
  }

  if (_internal_has_w()) {
    // required double w = 4;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t TestPose::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mw.internal.robotics.gazebotransport.TestPose)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required double x = 1;
    total_size += 1 + 8;

    // required double y = 2;
    total_size += 1 + 8;

    // required double z = 3;
    total_size += 1 + 8;

    // required double w = 4;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestPose::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mw.internal.robotics.gazebotransport.TestPose)
  GOOGLE_DCHECK_NE(&from, this);
  const TestPose* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestPose>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mw.internal.robotics.gazebotransport.TestPose)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mw.internal.robotics.gazebotransport.TestPose)
    MergeFrom(*source);
  }
}

void TestPose::MergeFrom(const TestPose& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mw.internal.robotics.gazebotransport.TestPose)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      z_ = from.z_;
    }
    if (cached_has_bits & 0x00000008u) {
      w_ = from.w_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TestPose::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mw.internal.robotics.gazebotransport.TestPose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestPose::CopyFrom(const TestPose& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mw.internal.robotics.gazebotransport.TestPose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestPose::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void TestPose::InternalSwap(TestPose* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TestPose, w_)
      + sizeof(TestPose::w_)
      - PROTOBUF_FIELD_OFFSET(TestPose, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TestPose::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace gazebotransport
}  // namespace robotics
}  // namespace internal
}  // namespace mw
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::mw::internal::robotics::gazebotransport::TestScalars* Arena::CreateMaybeMessage< ::mw::internal::robotics::gazebotransport::TestScalars >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mw::internal::robotics::gazebotransport::TestScalars >(arena);
}
template<> PROTOBUF_NOINLINE ::mw::internal::robotics::gazebotransport::TestArrays* Arena::CreateMaybeMessage< ::mw::internal::robotics::gazebotransport::TestArrays >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mw::internal::robotics::gazebotransport::TestArrays >(arena);
}
template<> PROTOBUF_NOINLINE ::mw::internal::robotics::gazebotransport::TestNestedMessage* Arena::CreateMaybeMessage< ::mw::internal::robotics::gazebotransport::TestNestedMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mw::internal::robotics::gazebotransport::TestNestedMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::mw::internal::robotics::gazebotransport::TestMessage* Arena::CreateMaybeMessage< ::mw::internal::robotics::gazebotransport::TestMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mw::internal::robotics::gazebotransport::TestMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::mw::internal::robotics::gazebotransport::TestPose* Arena::CreateMaybeMessage< ::mw::internal::robotics::gazebotransport::TestPose >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mw::internal::robotics::gazebotransport::TestPose >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
